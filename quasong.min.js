$(document).ready(function () {
  var m;
  var f;
  var i;
  var b;
  var d;
  var queue = [];
  var currentState = {
    L: { wolf: 0, sheep: 0 },
    R: { wolf: 3, sheep: 3 },
  };
  queue.push(currentState);

  // Tạo một đối tượng lưu trữ các bước di chuyển
  var moves = [];

  $(".start").bind("click", c);
  $(".go").bind("click", g);
  $(".more").bind("click", j);
  $(".reload").bind("click", a);

  o();
  function o() {
    m = "R";
    for (var p = 1; p <= 3; p++) {
      var q = new l("wolf");
      q.land();
    }
    for (var p = 1; p <= 3; p++) {
      var r = new l("sheep");
      r.land();
    }
  }

  function isMoveValid(currentState, object, from, to) {
    // Triển khai kiểm tra tính hợp lệ
    if (
      currentState.L.wolf > currentState.L.sheep ||
      currentState.R.wolf > currentState.R.sheep
    ) {
      return false;
    }

    // Triển khai kiểm tra tính hợp lệ
    if (
      from === "R" &&
      currentState.R[object] > 0 &&
      (to !== "L" || !isGoalState(currentState))
    ) {
      return true;
    }
  }

  function isGoalState(currentState) {
    // Kiểm tra xem tất cả các cừu và sói đã vượt qua sông hay chưa
    return $(".land.L .wolf, .land.L .sheep").size() === 6;
  }

  function generateNextStates(currentState) {
    var nextStates = [];

    // Tạo các bước di chuyển hợp lệ từ trạng thái hiện tại

    if (isMoveValid(currentState, "wolf", "R", "L")) {
      var move = { object: "wolf", from: "R", to: "L" };
      var newState = makeMove(currentState, "wolf", "R", "L");
      nextStates.push({ state: newState, move: move });
      if (isGoalState(newState)) {
        // Kiểm tra xem đã đạt được trạng thái mục tiêu sau bước di chuyển này
        console.log("Đã đạt trạng thái mục tiêu:", newState);
      }
    }
    if (isMoveValid(currentState, "sheep", "R", "L")) {
      var move = { object: "sheep", from: "R", to: "L" };
      var newState = makeMove(currentState, "sheep", "R", "L");
      nextStates.push({ state: newState, move: move });
    }

    return nextStates;
  }

  function callBFS() {
    var initialState = currentState; // Trạng thái ban đầu
    var solution = bfs(initialState, isGoalState);

    if (solution) {
      // Hiển thị hoặc xử lý lời giải ở đây
      console.log("Tìm thấy lời giải.");
    } else {
      // Xử lý khi không tìm thấy lời giải
      console.log("Không tìm thấy lời giải.");
    }
  }

  function makeMove(currentState, object, from, to) {
    // Sao chép trạng thái hiện tại sang trạng thái mới
    var newState = { L: {}, R: {} };
    for (var prop in currentState.L) {
      newState.L[prop] = currentState.L[prop];
      newState.R[prop] = currentState.R[prop];
    }

    // Cập nhật trạng thái mới dựa trên bước di chuyển
    newState[from][object]--;
    newState[to][object]++;

    return newState;
  }

  function bfs(initialState, isGoalState) {
    // Khởi tạo hàng đợi và thêm trạng thái ban đầu
    var queue = [initialState];
    var visited = new Set();
    visited.add(initialState);

    var moves = {}; // Lưu trữ bước di chuyển

    while (queue.length > 0) {
      var state = queue.shift();

      if (isGoalState(state)) {
        // Trạng thái mục tiêu đã được đạt
        return reconstructPath(state, moves);
      }

      var nextStates = generateNextStates(state);
      for (var nextStateInfo of nextStates) {
        var nextState = nextStateInfo.state;
        if (!visited.has(nextState)) {
          visited.add(nextState);
          queue.push(nextState);

          // Ghi nhớ bước di chuyển từ state đến nextState
          moves[nextState] = { parent: state, move: nextStateInfo.move };
        }
      }
    }

    // Không tìm thấy giải pháp
    return null;
  }

  function reconstructPath(state, moves) {
    var path = [];
    while (moves[state]) {
      var moveInfo = moves[state];
      path.unshift(moveInfo.move);
      state = moveInfo.parent;
    }
    return path;
  }

  function l(s) {
    var v = $("<div></div>").addClass(s);
    v.bind("click", r);
    this.land = p;
    this.boat = u;

    function r() {
      var w = $(this).parents(".L").size() == 1 ? "L" : "R";
      var y = $(this).parents(".boat").size() == 1;
      var z = $(this).parents(".land").size() == 1;
      if (z && w != m) {
        return;
      }
      if (y) {
        p();
      } else {
        if (q() < 2) {
          u();
        }
      }
      if (q() == 0) {
        $(".go").hide();
      }
      if (q() > 0) {
        $(".go").show();
      }
      if (m == "L" && t() == 6) {
        try {
          document.getElementById("bgmusic").pause();
          document.getElementById("smusic").play();
        } catch (x) {}
        setTimeout(n, 1000);
      }

      // Lưu bước di chuyển
      moves.push({ object: s, from: w, to: m });
    }

    function q() {
      return $(".boat .wolf, .boat .sheep").size();
    }

    function t() {
      return $(".land." + m + " .wolf, .land." + m + " .sheep").size();
    }

    function u() {
      if (q() < 2) {
        var w = $(".boat .seat:empty:first");
        w.append(v);
      }
    }

    function p() {
      var w = $(".land." + m + " .line_" + s + ":empty:first");
      w.append(v);
    }
  }

  function g() {
    var p = true;
    var r = $(".land." + m + " .wolf").size();
    var s = $(".land." + m + " .sheep").size();
    if (s != 0 && r > s) {
      p = false;
    }
    var q, t;
    if (m == "L") {
      q = {
        left: 260,
      };
      t = "R";
    } else {
      q = {
        left: 20,
      };
      t = "L";
    }
    m = "onTheWay";
    $(".boat").animate(q, "normal", "swing", function () {
      m = t;
      var v = $(".land." + m + " .wolf, .boat .wolf").size();
      var w = $(".land." + m + " .sheep, .boat .sheep").size();
      if (w != 0 && v > w) {
        p = false;
      }
      if (!p) {
        try {
          document.getElementById("bgmusic").pause();
          document.getElementById("emusic").play();
        } catch (u) {}
        setTimeout(e, 1000);
      }

      // Lưu bước di chuyển
      var move = { action: "go", from: m == "L" ? "R" : "L", to: m };
      moves.push(move);
    });
  }

  function e() {
    clearInterval(d);
    $(".mask").show();
    $(".go").hide();
    $(".failure").show();
    $(".reload").show();
    var movesBeforeBFS = moves.slice();
    displayMoves();
    callBFS(movesBeforeBFS);
  }

  function n() {
    try {
      document.getElementById("bgmusic").pause();
      document.getElementById("smusic").play();
    } catch (p) {}
    clearInterval(d);
    $(".mask").show();
    $(".go").hide();
    $(".time").hide();
    $(".success").show();

    $(".reload").show();
    displayMoves();
    callBFS();
  }

  function c() {
    $(".mask").hide();
    $(".start").hide();
    $(".time").show();
    f = new Date();
    d = setInterval(function () {
      i = new Date() - f;
      var q = parseInt(i / 1000 / 60);
      var r = (i / 1000) % 60;
      b = (q > 0 ? q + "P" : "") + r.toFixed(2) + "S";
      $(".time").text("Thời Gian：" + b);
    }, 25);
    try {
      document.getElementById("bgmusic").play();
    } catch (p) {}
  }

  function a() {
    $(".success").hide();
    $(".failure").hide();
    $(".reload").hide();
    $(".time").text("").hide();
    $(".result").text("").hide();
    $(".boat").css("left", 260);
    $(".start").show();
    $(".wolf, .sheep").remove();
    o();
    c();
    try {
      document.getElementById("bgmusic").play();
    } catch (p) {}
    moves = [];
  }

  function j() {
    clickMore();
  }
  function displayMoves() {
    console.log("Các bước di chuyển:");
    for (var move of moves) {
      if (move.action === "go") {
        console.log(`Đi qua sông ${move.from} đến ${move.to}`);
      } else {
        console.log(
          `Di chuyển ${move.object} từ bờ ${move.from} đến thuyền ${move.to}`
        );
      }
    }
  }
});
